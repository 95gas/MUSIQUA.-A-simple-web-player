package database_connection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import models.Album;
import models.Playlist;
import models.Song;

public class DBUtils {

	// LIST TOP SONGS
	public static List<Song> top_songs(Connection conn) throws SQLException {
		String sql = "SELECT S.title, S.year, S.duration, descr, A.full_name, AL.title FROM song AS S "
				+ "INNER JOIN has AS H ON S.id = H.id_song INNER JOIN artist AS A ON A.id = H.id_artist LEFT JOIN album AS AL ON AL.id = H.id_album INNER JOIN genre AS G ON G.id = S.id_genre "
				+ "INNER JOIN artist AS AR ON AR.id = AL.id_artist " + "WHERE rate_top = TRUE;";

		PreparedStatement pstm = conn.prepareStatement(sql);

		ResultSet rs = pstm.executeQuery();
		List<Song> list = new ArrayList<Song>();
		// ListIterator<Song> cursor = list.listIterator();
		// String previous_title = " ";

		while (rs.next()) {

			String title = rs.getString("S.title");
			String artist = rs.getString("A.full_name");

			float duration = rs.getFloat("S.duration");
			String genre = rs.getString("descr");
			int year = rs.getInt("S.year");
			String album = rs.getString("AL.title");

			if (rs.wasNull()) { // if song is a single
				album = " ";
			}

			Song best_song = new Song();
			best_song.setTitle(title);
			best_song.setDuration(duration);
			best_song.setGenre(genre);
			best_song.setArtist(artist);
			best_song.setAlbum(album);
			best_song.setYear(year);
			best_song.setIs_top(true);

			list.add(best_song);
		}

		if (list.size() > 0) {
			return list;
		}

		return null;
	}

	// LIST ALL SONGS
	public static List<Song> listSongs(Connection conn) throws SQLException {
		String sql = "SELECT S.title, S.year, S.duration, descr, A.full_name, AL.title "
				+ "FROM song AS S INNER JOIN has AS H ON S.id = H.id_song "
				+ "INNER JOIN artist AS A ON A.id = H.id_artist " + "LEFT JOIN album AS AL ON AL.id = H.id_album "
				+ "INNER JOIN genre AS G ON G.id = S.id_genre " + "INNER JOIN artist AS AR ON AR.id = AL.id_artist;";

		PreparedStatement pstm = conn.prepareStatement(sql);

		ResultSet rs = pstm.executeQuery();
		List<Song> list = new ArrayList<Song>();

		while (rs.next()) {

			String title = rs.getString("S.title");
			String artist = rs.getString("A.full_name");

			float duration = rs.getFloat("S.duration");
			String genre = rs.getString("descr");
			int year = rs.getInt("S.year");
			String album = rs.getString("AL.title");

			if (rs.wasNull()) { // if song is a single
				album = " ";
			}

			Song best_song = new Song();
			best_song.setTitle(title);
			best_song.setDuration(duration);
			best_song.setGenre(genre);
			best_song.setArtist(artist);
			best_song.setAlbum(album);
			best_song.setYear(year);
			best_song.setIs_top(true);

			list.add(best_song);

		}

		if (list.size() > 0) {
			return list;
		}

		return null;
	}

	// RETUNR ID_GENRE
	public static int Return_ID_genre(Connection conn, String genre) throws SQLException {
		String sql = "SELECT id FROM genre WHERE descr = ?";
		int id = -1;
		
		PreparedStatement pstm = conn.prepareStatement(sql);
		pstm.setString(1, genre);
		
		ResultSet rs = pstm.executeQuery();

		if (rs.next()) {
			id = rs.getInt("id");
		}
		
		return id;
	}
	
	// RETURN ID_ARTIST
	public static int Return_ID_artist(Connection conn, String full_name) throws SQLException {
		String sql = "SELECT id FROM artist WHERE full_name = ?;";
		int id = -1;
		
		PreparedStatement pstm = conn.prepareStatement(sql);
		pstm.setString(1, full_name);

		ResultSet rs = pstm.executeQuery();
		
		
		if (rs.next()) {
			id = rs.getInt("id");
		}
		
		return id;
	}
	
	// RETURN ID_ALBUM
	public static int Return_ID_album(Connection conn, String name, String artist, int year) throws SQLException {
		
		int idartist = DBUtils.Return_ID_artist(conn, artist);
		String sql = "SELECT id FROM album WHERE title = ? AND id_artist = ? AND year = ?;";
		int id = -1;
		
		PreparedStatement pstm = conn.prepareStatement(sql);
		pstm.setString(1, name);
		pstm.setInt(2, idartist);
		pstm.setInt(3, year);

		ResultSet rs = pstm.executeQuery();
		if (rs.next()) {
			id = rs.getInt("id");
		}
	 
		return id;
	}

	// ADD SONG (return the id generated by the dbb)
	public static int insertSong(Connection conn, Song song) throws SQLException {
		String sql = "Insert into Song values (?,?,?,?,?)";
		int id = -1;

		PreparedStatement pstm = conn.prepareStatement(sql);

		String title = song.getTitle();
		int year = song.getYear();
		Float duration = song.getDuration();
		String genre = song.getGenre();
		Boolean isTop = song.isIs_top();
		int id_genre = Return_ID_genre(conn, genre);

		pstm.setString(1, title);
		pstm.setInt(2, year);
		pstm.setFloat(3, duration);
		pstm.setBoolean(4, isTop);
		pstm.setInt(5, id_genre);

		pstm.executeUpdate();

		String sql1 = "SELECT id FROM song WHERE title=?, year=?,duration=?,rate_top=?,id_genre=?)";

		PreparedStatement pstm1 = conn.prepareStatement(sql1);

		pstm1.setString(1, title);
		pstm1.setInt(2, year);
		pstm1.setFloat(3, duration);
		pstm1.setBoolean(4, isTop);
		pstm1.setInt(5, id_genre);

		ResultSet rs = pstm1.executeQuery();

		if (rs.next()) {
			id = rs.getInt("id");
		}

		return id;
	}

	// ADD ARTIST (return the id generated by the dbb)
	public static int insertArtist(Connection conn, String fullname) throws SQLException {
		String sql = "Insert into artist values (?)";
		int id = -1;

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setString(1, fullname);

		pstm.executeUpdate();

		String sql1 = "SELECT id FROM artist WHERE first_name=?, last_name=?";

		PreparedStatement pstm1 = conn.prepareStatement(sql1);

		pstm.setString(1, fullname);

		ResultSet rs = pstm1.executeQuery();

		if (rs.next()) {
			id = rs.getInt("id");
		}

		return id;
	}

	// ADD ALBUM (return the id generated by the dbb)
	public static int insertAlbum(Connection conn, Album album, String full_name) throws SQLException {
		String sql = "Insert into album values (?,?,?,?,?)";
		int id = -1;

		PreparedStatement pstm = conn.prepareStatement(sql);

		String title = album.getName();
		int year = album.getYear();
		Float duration = album.getDuration();
		Blob cover = album.getCover();
		int id_artist = Return_ID_artist(conn, full_name);

		pstm.setString(1, title);
		pstm.setInt(2, id_artist);
		pstm.setFloat(3, duration);
		pstm.setInt(4, year);
		pstm.setBlob(5, cover);

		pstm.executeUpdate();

		String sql1 = "SELECT id FROM album WHERE title = ?, id_artist=?, year=?";

		PreparedStatement pstm1 = conn.prepareStatement(sql1);

		pstm.setString(1, title);
		pstm.setInt(2, id_artist);
		pstm.setInt(3, year);

		ResultSet rs = pstm1.executeQuery();

		if (rs.next()) {
			id = rs.getInt("id");
		}

		return id;
	}

	// ADD LINK ALBUM, ARTIST AND RELATIVE SONG
	public static void link(Connection conn, int id_album, int id_song, int id_artist) throws SQLException {
		String sql = "Insert into has values (?,?,?)";

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setInt(1, id_song);
		pstm.setInt(2, id_artist);
		pstm.setInt(3, id_album);

		pstm.executeUpdate();

	}

	// LIST ALBUMS
	public static List<Album> listAlbums(Connection conn) throws SQLException {
		String sql = "SELECT title, full_name, duration, year, cover FROM album AS AL INNER JOIN artist AS AR ON AL.id_artist = AR.id;";

		PreparedStatement pstm = conn.prepareStatement(sql);

		ResultSet rs = pstm.executeQuery();
		List<Album> list = new ArrayList<Album>();

		while (rs.next()) {
			String title = rs.getString("title");
			float duration = rs.getFloat("duration");
			String artist = rs.getString("full_name");
			int year = rs.getInt("year");
			Blob cover = rs.getBlob("cover");

			Album album = new Album();
			album.setName(title);
			album.setYear(year);
			album.setDuration(duration);
			album.setArtist(artist);
			album.setCover(cover);

			list.add(album);
		}

		if (list.size() > 0) {
			return list;
		}

		return null;
	}

	// list playlist per user
	public static List<Playlist> findPlaylists(Connection conn, String user) throws SQLException {
		String sql = "SELECT title "
				+ "FROM playlist AS P INNER JOIN listen_to AS L ON P.id = id_playlist INNER JOIN users AS U ON U.id = id_user;"
				+ "WHERE U.username = ?";

		PreparedStatement pstm = conn.prepareStatement(sql);
		pstm.setString(1, user);

		ResultSet rs = pstm.executeQuery();

		List<Playlist> list = new ArrayList<Playlist>();

		while (rs.next()) {

			String title = rs.getString("title");
			Playlist playlist = new Playlist(title);
			list.add(playlist);

		}

		if (list.size() > 0) {
			return list;
		}

		return null;
	}


	// list playlist per user TEST
	public static List<Playlist> test(Connection conn) throws SQLException {
		String sql = "SELECT title "
				+ "FROM playlist AS P INNER JOIN listen_to AS L ON P.id = id_playlist INNER JOIN users AS U ON U.id = id_user;";

		PreparedStatement pstm = conn.prepareStatement(sql);

		ResultSet rs = pstm.executeQuery();

		List<Playlist> list = new ArrayList<Playlist>();

		while (rs.next()) {

			String title = rs.getString("title");
			Playlist playlist = new Playlist(title);
			list.add(playlist);
		}

		if (list.size() > 0) {
			return list;
		}

		return null;
	}
	
	public static void AddToPlaylist(Connection conn, int idSong, int idPlaylist) throws SQLException {
		String sql = "INSERT INTO contain"
				+ "VALUES (?,?);";

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setInt(1, idSong);
		pstm.setInt(2, idPlaylist);

		pstm.executeUpdate();
		
	}
	
	public static int find_IDSong(Connection conn, String name, String artist) throws SQLException {
		String sql = "SELECT S.id "
				+ "FROM song AS S INNER JOIN has AS H ON id_song =S.id "
				+ "INNER JOIN artist AS A ON A.id = id_artist "
				+ "WHERE title = ? AND full_name = ?;";
		int id = -1;

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setString(1, name);
		pstm.setString(2, artist);

		ResultSet rs = pstm.executeQuery();

		if (rs.next()) {
			id = rs.getInt("id");
		}
		
		return id;
	}
	
	public static int find_IDPlaylist(Connection conn, String name, String username) throws SQLException {
		String sql = "SELECT id"
				+ "FROM playlist AS P INNER JOIN listen_to ON P.id = id_playlist"
				+ "INNER JOIN users AS U ON U.id = id_user"
				+ "WHERE title = ? AND username = ?;";
		int id = -1;

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setString(1, name);
		pstm.setString(2, username);

		ResultSet rs = pstm.executeQuery();
		
		if (rs.next()) {
			id = rs.getInt("id");
		}
		
		return id;
	}
	
	public static void updateAlbum(Connection conn, int id, String title, String artist, int year) throws SQLException {
		
		int id_artist = Return_ID_artist(conn, artist);
		
		if (id_artist == -1) {
			System.out.println("Artist not found! Cannot edit the album");
			return;
		}
		
		String sql = "UPDATE album SET title = ? , year = ?, id_artist = ?  WHERE id= ?;";

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setString(1, title);
		pstm.setInt(2, year );
		pstm.setInt(3, id_artist);
		pstm.setInt(4, id);

		pstm.executeUpdate();
	}
	
	public static void deleteAlbum(Connection conn, int id_album) throws SQLException {
		String sql = "Delete From album where id = ?";

		PreparedStatement pstm = conn.prepareStatement(sql);

		pstm.setInt(1, id_album);

		pstm.executeUpdate();
	}

}
